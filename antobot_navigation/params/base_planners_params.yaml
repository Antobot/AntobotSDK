
###########################################################################################################################
# Copyright (c) 2023, ANTOBOT LTD.
# All rights reserved.

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 

#Description: 	This is a .yaml file where the base_planner parameters are definied. These are parameters can be grouped into robot configuration, goal tolerance, forward simulation, trajectory scoring, oscillation prevention and global plan. This file also holds the parameters for DWA Planner, NavfnROS and Eband local Planner.

#Contacts: 	soyoung.kim@antobot.ai
#		 
##################################################################################################################

#ROBOT CONFIGURATION PARAMETERS

## TODO 10
# Maximum and minimum forward velocity allowed for base in meters/sec
# TrajectoryPlannerROS:
#   max_vel_x: 0.25
#   min_vel_x: -0.25
#   max_vel_y: 0.0
#   min_vel_y: 0.0

#   # The velocity when robot is moving in a straight line
#   max_trans_vel:  0.25
#   min_trans_vel:  0

#   max_rot_vel: 0.5
#   min_rot_vel: 0.1

  
#   max_vel_theta:  0.5
#   min_vel_theta: -0.5
#   min_in_place_vel_theta: 0.1

#   ## TODO 2
#   acc_lim_x: 0.1
#   acc_lim_y: 0.1

#   acc_lim_theta: 0.5
  
#   #holonomic robot default true, if set as false, no strafing velocity commands will be issued
#   holonomic_robot: false

#   y_vels: [-2.0, -2.0, 2.0, 2.0]

#   # New Stuff
#   #escape_vel is the speed used for driving the robot during escapes in meter/sec. This must be in negative as this is a reverse velocity
#   escape_vel: -0.2


# #GOAL TOLERANCE PARAMETERS

# #yaw_goal_tolerance: The tolerance in radians for the controller in yaw/rotation when achieving its goal
#   yaw_goal_tolerance: 10.0  # in rads


# # xy_goal_tolerance: The tolerance in meters for the controller in the x & y distance when achieving a goal

#   xy_goal_tolerance: 0.25  # in meters

# # latch_xy_goal_tolerance: if the robot ever reaches the goal xy location it will simply rotate in place, default: false

#   latch_xy_goal_tolerance: false

  
# #FORWARD SIMULATION PARAMETERS

# # these parameters change how the planner simulates trajectories at each update and therefore changes the optimal trajectory that is chosen
# # These should be adjusted based on your computer performance

# # sim_time:setting time of each simulation that it must evaluate. Higher will create longer curves but too low can limit performance (<2)
#   sim_time: 2.0 

# # sim_granularity: the step size to take between points on a trajectory, or how frequent should the points on this trajectory should be examined
#   sim_granularity: 0.02 

# #angular_sim_granularity:The step size, in radians, to take between angular samples on a given trajectory
#   angular_sim_granularity: 0.02

# #vx_samples: how many samples of x velocity are taken for simulated trajectories
#   vx_samples: 3 

# #vtheta_samples: how many samples of theta velocity are taken for simulated trajectories
#   vtheta_samples: 30 

# #controller_frequency: how often the planning algorithm is performed (hz)
#   controller_frequency: 5.0 

# #TRAJECTORY SCORING PARAMETERS

# #meter_scoring: Whether the gdist_scale and pdist_scale parameters should assume that goal_distance and path_distance are expressed in units of meters or cells. Cells are assumed by default (false).
#   meter_scoring: true 

# #occdist_scale: The weighting for how much the controller should attempt to avoid obstacles. default 0.01
#   occdist_scale:  0.1 

# #pdist_scale: The weighting for how much the controller should stay close to the path it was given . default 0.6
#   pdist_scale: 0.5  

# #gdist_scale: The weighting for how much the controller should attempt to reach its local goal, also controls speed  default 0.8
#   gdist_scale: 1.0
   

# #heading_lookahead: How far to look ahead in meters when scoring different in-place-rotation trajectories
#   heading_lookahead: 0.325

# #heading_scoring: Whether to score based on the robot's heading to the path or its distance from the path. default false  
#   heading_scoring: false 

# #heading_scoring_timestep: How far to look ahead in time in seconds along the simulated trajectory when using heading scoring (double, default: 0.8)
#   heading_scoring_timestep: 0.8   

# #Whether to use the Dynamic Window Approach (DWA)_ or whether to use Trajectory Rollout
#   dwa: true 

#   simple_attractor: false
#   publish_cost_grid_pc: true  

# # OSCILLATION PREVENTION PARAMETERS
# # oscillation_reset_dist: How far the robot must travel in meters before oscillation flags are reset (double, default: 0.05)
#   oscillation_reset_dist: 0.25 
#   escape_reset_dist: 0.1
#   escape_reset_theta: 0.1

#   # Debugging
#   publish_traj_pc : true
#   publish_cost_grid_pc: true

##############################################
#DWA PLANNER ROS
##############################################
DWAPlannerROS:


  # Robot configuration parameters  
  max_vel_x: 1.0
  min_vel_x: 0.0
  max_vel_y: 0
  min_vel_y: 0

  # The velocity when robot is moving in a straight line
  max_vel_trans: 1.0
  min_vel_trans:  0.0

  max_vel_theta: 3.5
  min_vel_theta: 0.5

  min_in_place_vel_theta: 0.1
  
  # the acceleration limits of the robot in m/s^2
  acc_lim_x: 2.5
  acc_lim_y: 2.5
  acc_lim_theta: 6.0
  acc_lim_trans: 2.5

  # Goal Tolerance Parametes

  xy_goal_tolerance: 0.5 #larger values make the way point following unnatural (stops every waypoint)
  yaw_goal_tolerance: 6.0
#latch_xy_goal_tolerance: latch_xy_goal_tolerance: if the robot ever reaches the goal xy location it will simply rotate in place, default: false
  latch_xy_goal_tolerance: false

# FORWARD SIMULATION PARAMETERS

# sim_time: The amount of time to forward-simulate trajectories in seconds
  sim_time: 1.0
# sim_granularity: the step size to take between points on a trajectory, or how frequent should the points on this trajectory should be examined
  sim_granularity: 0.1

#angular_sim_granularity:The step size, in radians, to take between angular samples on a given trajectory
  angular_sim_granularity: 0.1

#vx_samples: The number of samples to use when exploring the x velocity space
  vx_samples: 10

#vy_samples: The number of samples to use when exploring the y velocity space
  vy_samples: 10

#vth_samples:The number of samples to use when exploring the theta velocity space
  vth_samples: 20

# TRAJECTORY SCORING PARAMETERS

# path_distance_bias: weight for how much the local planner should stay close to the global path high value will make the local planner prefer trajectories on global path
  path_distance_bias: 32.0   

#goal_distance_bias: is the weight for how much the robot should attempt to reach the local goal, with whatever path. Experiments show that increasing this parameter enables the robot to be less attached to the global path.
  goal_distance_bias: 24.0
 
# occdist scale is the weight for how much the robot should attempt to avoid obstacles. A high value for this parameter results in indecisive robot that stucks in place
  occdist_scale: 0.01
 
#Whether to use the Dynamic Window Approach (DWA)_ or whether to use Trajectory Rollout
  dwa: true 

#forward_point_distance: The distance from the center point of the robot to place an additional scoring point, in meters
  # forward_point_distance: 0.325

#stop_time_buffer:The amount of time that the robot must stop before a collision in order for a trajectory to be considered valid in seconds
  # stop_time_buffer: 0.2

#scaling_speed: The absolute value of the velocity at which to start scaling the robot's footprint, in m/s
  # scaling_speed: 0.25

#max_scaling_factor: The maximum factor to scale the robot's footprint by
  # max_scaling_factor: 0.2

#OSCILLATION PREVENTION PARAMETERS

#oscillation_reset_dist: How far the robot must travel in meters before oscillation flags are reset
  oscillation_reset_dist: 0.05

  # Debugging
  publish_traj_pc : true
  publish_cost_grid_pc: true
  
# how often the planning algorithm is performed (hz)
  controller_frequency: 10.0  

# GLOBAL PLANNER PARAMETERS                                     
GlobalPlanner: 

#A tolerance on the goal point for the planner. The planner will attempt to create a plan that is as close to the specified goal as possible but no further than default_tolerance away. default 0.0                                             
  default_tolerance: 0.25

#use_dijktra if true, use dijkstra's algorithm. Otherwise, A*.
  use_dijkstra: false

# use_grid_path if true, create a path that follows the grid boundaries. Otherwise, use a gradient descent method. default false 
  use_grid_path: true

#Factor to multiply each cost from costmap by default 3                                    
  cost_factor: 0.5489 

#Neutral Cost (dynamic reconfigure) default 50                                       
  neutral_cost: 66 

#Lethal Cost (dynamic reconfigure) default 253                                          

# global_planner params                                      

# visualize potential: Specifies whether or not to visualize the potential area computed via a PointCloud2.
  visualize potential: true
  outline_map: false


#######################################################################
#NavfnROS: This package provides an implementation of a fast, interpolated navigation function used to create plans for a mobile base through the navfn::NavFn class. 
########################################################################
NavfnROS:

#allow_unknown: Specifies whether or not to allow navfn to create plans that traverse unknown space.
  allow_unknown: false 

# A tolerance on the goal point for the planner.
  default_tolerance: 0.1 

#Specifies whether or not to visualize the potential area computed by navfn via a PointCloud2.
  visualize potential: false

######################################################################
#EBandPlannerROS: The local planner computes an elastic band within the local costmap, and attempts to follow the path generated by connecting the center points of the band using various heuristics.
######################################################################
EBandPlannerROS:

  differential_drive: false

#Trajectory Controller Parameters

  max_vel_lin: 0.75
  max_vel_th: 1.0
  min_vel_lin: 0.1
  min_vel_th: 0.0
  min_in_place_vel_th: 0.0
  in_place_trans_vel: 0.0
  max_acceleration: 0.5
  max_translational_acceleration: 0.5
  max_rotational_acceleration: 1.5

# GOAL TOLERANCE PARAMETERS
  xy_goal_tolerance: 0.1  # in meters
  yaw_goal_tolerance: 0.05  # in rads

# OSCILLATION PREVENTION PARAMETERS
  oscillation_reset_dist: 0.05

  escape_vel: -0.1
  escape_reset_dist: 0.1
  escape_reset_theta: 0.1



